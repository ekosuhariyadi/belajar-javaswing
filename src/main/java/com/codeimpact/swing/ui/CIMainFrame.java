/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.codeimpact.swing.ui;

import com.codeimpact.swing.abstraction.CIFrame;
import com.codeimpact.swing.jideossimpl.JideOSSAutoCompletionIFrame;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyVetoException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author eko
 */
public class CIMainFrame extends JFrame implements CIFrame {

    /**
     * Creates new form MainFrame
     */
    public CIMainFrame() {
        initComponents();
        initForm();
        initListener();
    }
    
    private void initForm() {
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }
    
    private void initListener() {
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                doExit();
            }
        });
    }
    
    @Override
    public void doExit() {
        int confirm = JOptionPane.showConfirmDialog(this,
                "Konfirmasi Keluar Aplikasi",
                "Yakin untuk keluar dari program",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        
        if (confirm == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }
    
    @Override
    public void addInternalFrame(JInternalFrame iFrame) {
        this.addInternalFrame(iFrame, false);
    }
    
    @Override
    public void addInternalFrame(JInternalFrame iFrame, boolean maximize) {
        try {
            iFrame.setVisible(true);
            desktopPane.add(iFrame);
            iFrame.setMaximum(maximize);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(CIMainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        statusPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        mnFile = new javax.swing.JMenu();
        mnExit = new javax.swing.JMenuItem();
        mnJideOSS = new javax.swing.JMenu();
        mnAutoCompletion = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Code Impact | Belajar Java Swing");

        statusPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jLabel1.setText("Status Bar");
        statusPanel.add(jLabel1);

        mnFile.setText("File");

        mnExit.setText("Exit");
        mnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnExitActionPerformed(evt);
            }
        });
        mnFile.add(mnExit);

        menuBar.add(mnFile);

        mnJideOSS.setText("Jide OSS");

        mnAutoCompletion.setText("Auto Completion");
        mnAutoCompletion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnAutoCompletionActionPerformed(evt);
            }
        });
        mnJideOSS.add(mnAutoCompletion);

        menuBar.add(mnJideOSS);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane)
            .addComponent(statusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnExitActionPerformed
        doExit();
    }//GEN-LAST:event_mnExitActionPerformed
    
    private void mnAutoCompletionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnAutoCompletionActionPerformed
        addInternalFrame(new JideOSSAutoCompletionIFrame());
    }//GEN-LAST:event_mnAutoCompletionActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem mnAutoCompletion;
    private javax.swing.JMenuItem mnExit;
    private javax.swing.JMenu mnFile;
    private javax.swing.JMenu mnJideOSS;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
}
